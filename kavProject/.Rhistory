beta1[trial] = summary(lm.1$coefficients[2])
beta1[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
beta1 <- c()
beta2 <- c()
alpha <- c()
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta1[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
beta1 <- c()
beta2 <- c()
alpha <- c()
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta2[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
qnorm(alpha)
qqnorm(alpha)
qqnorm(beta2)
qqnorm(beta1)
mean(alpha)
mean(beta1)
mean(beta2)
summary(lm.1)
summary(lm.1)
summary(lm.1)
sd(beta1)
predict(lm.1)
SXX <- sum((beta1 - mean(beta1))^2)
SXX
sd(beta1)
0.2/sqrt(SXX)
SXX
summary(lm.1)
summary(lm1)
hist(alpha)
hist(alpha)
hist(beta1)
hist(beta2)
qqnorm(alpha)
qqnorm(beta1)
qqnorm(beta2)
hist(alpha)
hist(beta1)
hist(beta2)
qqnorm(alpha)
qqnorm(beta1)
qqnorm(beta2)
shiny::runApp('Documents/INFO201/TeamBD5-Final-Project')
runApp()
runApp()
runApp()
runApp('Documents/INFO201/TeamBD5-Final-Project')
tweet_score
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
shiny::runApp('Documents/INFO330/kavProject')
tweet_score
tweet_info
tweet_info <- searchTwitter(paste0("#", input$hashtag), 50)
tweet_info_df <- twListToDF(tweet_info)
row_number <- 1:30
tweet_info$row_number <- row_number
tweet_info_df
output
runApp('Documents/INFO330/kavProject')
tweets
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
text
tweet_info_df
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
tweet_sentiment
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
tweet_score
tweet_info
runApp('Documents/INFO330/kavProject')
tweet_info
text
tweet_info
shiny::runApp('Documents/INFO330/kavProject')
tweets
conservative_tweets
conservative_tweets
conservative_tweets
conservative_tweets
row_number
tweet_info_df
row_number
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
shinyServer(
function(input, output) {
output$key_tweets <- renderTable({
return(term_search(input$term))
})
tweets <- reactive({
popular <- return(term_top_5(input$top_5, input$quantity))
})
output$tweets_plot <- renderPlotly({
return(plot_tweets(tweets()))
})
output$tweets_tbl <- renderTable({
tweets()[, c("Twitter Handle", "Tweet", "Number of Retweets")]
})
output$plot <- renderPlot({
tweet_info <- searchTwitter(paste0("#", input$hashtag), 50)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
row_number <- 1:50
tweet_info_df$row_number <- row_number
tweet_info_df$positivity <- sum()
#All you have to do is find a way to a) assign each tweet a positivity "score" and multiply by retweets
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup() %>%
arrange(n)
is.data.frame(binary_sentiment)
total_score <- tweet_score$score * tweet_score$n
# I would like to point out that it was NOT easy to get those colors right
positivity_plot <- ggplot(data = tweet_score, aes(x = factor(word), y = total_score)) +
geom_bar(aes(fill = total_score < 0), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(guide = FALSE, breaks = c(TRUE, FALSE), values = c("green", "red")) +
labs(
x = "Most Common Words in Tweets",
y = "Positivity Score",
title = "Positivity of Tweets",
fill = "Positivity"
)
# Using only 3 through 8 since 'positive' and 'negative are by
# far the most popular sentiments, although they cannot be used
positivity_plot
})
output$plot2 <- renderPlot({
search <- searchTwitter(input$hashtag)
popular_tweets <- twListToDF(search)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity", fill = "#FF6666") +
xlab("Usernames") +
ylab("Retweet Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
}
)
tweet_info
output$key_tweets <- renderTable({
return(term_search(input$term))
})
runApp('Documents/INFO330/kavProject')
tweet_info <- searchTwitter(paste0("#", input$hashtag), 50)
tweet_info <- searchTwitter(paste0("#", input$hashtag), 50)
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
library(shiny)
library(httr)
library(jsonlite)
library(plotly)
library(dplyr)
library(ggplot2)
# install.packages("twitteR")
library(twitteR)
source("api-keys.R")
source("./scripts/key_terms.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
shinyServer(
function(input, output) {
output$key_tweets <- renderTable({
return(term_search(input$term))
})
tweets <- reactive({
popular <- return(term_top_5(input$top_5, input$quantity))
})
output$tweets_plot <- renderPlotly({
return(plot_tweets(tweets()))
})
output$tweets_tbl <- renderTable({
tweets()[, c("Twitter Handle", "Tweet", "Number of Retweets")]
})
output$plot <- renderPlot({
tweet_info <- searchTwitter(paste0("#", input$hashtag), 50)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
row_number <- 1:50
tweet_info_df$row_number <- row_number
tweet_info_df$positivity <- sum()
#All you have to do is find a way to a) assign each tweet a positivity "score" and multiply by retweets
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup() %>%
arrange(n)
is.data.frame(binary_sentiment)
total_score <- tweet_score$score * tweet_score$n
# I would like to point out that it was NOT easy to get those colors right
positivity_plot <- ggplot(data = tweet_score, aes(x = factor(word), y = total_score)) +
geom_bar(aes(fill = total_score < 0), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(guide = FALSE, breaks = c(TRUE, FALSE), values = c("green", "red")) +
labs(
x = "Most Common Words in Tweets",
y = "Positivity Score",
title = "Positivity of Tweets",
fill = "Positivity"
)
# Using only 3 through 8 since 'positive' and 'negative are by
# far the most popular sentiments, although they cannot be used
positivity_plot
})
output$plot2 <- renderPlot({
search <- searchTwitter(input$hashtag)
popular_tweets <- twListToDF(search)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity", fill = "#FF6666") +
xlab("Usernames") +
ylab("Retweet Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
}
)
tweets
row_number
tweet_info_df
tweet_info_df
tweet_info_df
tweet_info_df
tweet_score
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
shiny::runApp('Documents/INFO201/TeamBD5-Final-Project')
tweet_info
tweet_info
tweet_info
tweet_info
tweet_info
tweet_info
tweet_score
tweet_score
tweet_score
runApp('Documents/INFO201/TeamBD5-Final-Project')
tweet_score
tweet_score
tweet_score
text
tweet_info_df
text
text
tweet_info_df$score <- strsplit(tweet_info_df$text, " ") %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
runApp()
runApp('Documents/INFO201/TeamBD5-Final-Project')
runApp('~/Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
tweet_info_df
strsplit(tweet_info_df$text, " ")
runApp('Documents/INFO330/kavProject')
strsplit(tweet_info_df$text, " ")
tweet_info_df
tweet_info_df$score
score
tweet_info_df$score
runApp('Documents/INFO330/kavProject')
get_sentiments("afinn")$banana
get_sentiments("afinn")["banana"]
get_sentiments("afinn")[,"banana"]
get_sentiments("afinn")["banana",]
get_sentiments("afinn")
get_sentiments("afinn")[word = 'banana']
get_sentiments("afinn")['banana']
get_sentiments("afinn")['banana',]
get_sentiments("afinn")['bad',]
get_sentiments("afinn")
get_sentiments("afinn")['abandon',]
get_sentiments("afinn")$word
as.dataframe(get_sentiments("afinn"))
dataframe(get_sentiments("afinn"))
as.data.frame(get_sentiments("afinn"))
dictionary <- as.data.frame(get_sentiments("afinn"))
dictionary
dictionary[chokes]
dictionary["chokes"]
dictionary[,"chokes"]
dictionary["chokes",]
dictionary['chokes',]
dictionary[word = 'chokes']
dictionary[word == 'chokes']
dictionary[which(dictionary$word == "choke"),]
dictionary[which(dictionary$word == "choke")][]
dictionary[which(dictionary$word == "choke"), 2]
tweet_info_df$tokenized
runApp('Documents/INFO330/kavProject')
sum(dictionary[which(dictionary$word == tweet_info_df$tokenized[1]), 2])
runApp('Documents/INFO330/kavProject')
tweet_info_df$tokenized
tweet_info_df$tokenized
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
dictionary[word, socre > 0]
positive_words <- dictionary[word, score > 0]
dictionary
dictionary[word, "score" > 0]
dictionary["word", "score" > 0]
dictionary[word][score > 0]
dictionary[dictionary$score > 0, 2]
dictionary[dictionary$score > 0, 1]
dictionary[dictionary$score < 0, 1]
tweet_info_df
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
tweet_info_df
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
tweet_info_df
runApp()
runApp()
runApp('Documents/INFO330/kavProject')
tweet_info_df
tweet_info_df$sentiment
tweet_info_df$sentiment <- score.sentiment(tweet_info_df$text, positive_words, negative_words, .progress = 'none')[,1]
tweet_info_df$sentiment
tweet_info_df
negative_tweet_info <- tweet_info_df[tweet_info$sentiment < 0]
negative_tweet_info
negative_tweet_info <- tweet_info_df[tweet_info$sentiment < 0, ]
negative_tweet_info
negative_tweet_info <- tweet_info_df[tweet_info_df$sentiment < 0, ]
negative_tweet_info
total_positive <- (sum(negative_tweet_info$retweeCount))
total_positive
total_positive <- sum(negative_tweet_info$retweeCount)
total_positive
negative_tweet_info
total_negative <- sum(negative_tweet_info$retweetCount)
total_negative
total_positive <- sum(positive_tweet_info$retweetCount)
positive_tweet_info <- tweet_info_df[tweet_info_df$sentiment > 0, ]
positive_tweet_info
total_positive <- sum(positive_tweet_info$retweetCount)
total_positive
agreement_plot <-ggplot(total_negative, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
as.data.frame("positive" = total_positive, negative = total_negative)
as.data.frame("positive" = total_positive, negative = total_negative)
data.frame("positive" = total_positive, negative = total_negative)
total <- data.frame("positive" = total_positive, negative = total_negative)
total
agreement_plot <- ggplot(total, aes(positive, negative))
g + geom_bar(stat="identity", width = 0.5, fill="tomato2") +
labs(title="Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Frequency of Manufacturers from 'mpg' dataset") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
agreement_plot <- ggplot(total, aes(positive, negative))
agreement_plot + geom_bar(stat="identity", width = 0.5, fill="tomato2") +
labs(title="Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Frequency of Manufacturers from 'mpg' dataset") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
agreement_plot
agreement_plot
agreement_plot
agreement_plot <- ggplot(total, aes(positive, negative))
agreement_plot
agreement_plot <- ggplot(total)
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
agreement_plot
total
total <- ggplot(data = total) +
geom_bar(mapping = aes(x = class))
total
total <- ggplot(data = total) +
geom_bar(mapping = aes(x = class))
total
total
plot(total)
plot(total)
total
total
total
total
total
total <- data.frame("positive" = total_positive, "negative" = total_negative)
total
plot(total)
plot(total)
plot(total)
plot(total)
plot(total)
thing1 <- c(1, 2, 3, 4, 5, 6)
thing2 <- c(1, 4, 5, 3, 2, 3)
thing <- data.frame(thing1, thing2)
thing
plot(thing)
plot(thing)
plot(thing)
plot(thing)
plot(thing)
plot(thing)
plot(thing)
runApp()
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
final_plot <- barplot(total, main="attitude",
xlab="Number of People")
total <- data.frame("positive" = total_positive, "negative" = total_negative)
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
runApp('Documents/INFO330/kavProject')
final_plot <- barplot(total)
runApp('Documents/INFO330/kavProject')
